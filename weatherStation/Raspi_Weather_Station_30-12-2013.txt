Raspberry Pi and the Home Weather Station IntroductionThis article describes how I have used my Raspberry Pi to manage my home weather station.   This will include the background to the project and some examples of  the information collected as well as a few pitfalls. The complete software (with working title of “Squall”) is available from magpi or my own website www.spire-three.com it is open-source and anyone is free to build-upon itRecording and Predicting the WeatherAccurate weather Forecasts  can save  lives and money and the UK Met Office use satellites, weather balloons, ground stations and  supercomputers to produce forecasts that are  accurate for several days ahead.  Clearly, amateurs cannot compete with these resources  but it is surprising what can be achieved with an off-the-shelf weather station and a humble Raspi.The Met Office 's  network of ground-based weather stations include “Synoptic”  stations recording the weather every hour  and “Supplementary” stations taking  measurements, at 9-00am each day. Supplementary stations the aim is to produce a continuous record of conditions at that site over a long period of time (30+ years as a minimum but many stations have continuous records stretching much further back). This information helps us to understand long-term changes in the climate. In contrast, synaptic stations'  measurements are more frequent (hourly), include a  additional parameters and provide vital information for  current weather forecasts. Modern home weather stations are largely comparable with supplementary stations. So, we can use the home weather station  to build-up an interesting record of our local weather, learning  a lot in the process.  We may also make educated guesses about what will happen to our weather over the next twelve to twenty-four hours.Our  measurements are made electronically and so can be taken automatically (we don't need to get up in the middle of the night and we can go on holiday knowing exactly what the weather is like at home!). We can also take  readings very frequently, maybe even every five-minutes, allowing us to track changes that happen relatively quickly.  Finally, data can be transferred  to a Raspi for analysis and longer-term storage. ObjectivesMyweather station is branded under the name of a leading chain of UK electronics stores (Maplin) but the same equipment is also available under other names. It is identifiable using the lsusb command as “Bus 001 Device 004: ID 1941:8021 Dream Link WH1080 Weather Station / USB Missile Launcher”!My aims were:-• to  capture and store weather data so that I could look back over weather events to see what had actually  happened. This could involve a lot of  data suggesting that a database would be needed.• to see how well MySQL, a commercial strength database, would perform on the Raspi.• to be able to make the latest information available on my website, www.spire-three.com in “near real-time” (ie every 10-20 minutes). The performance of MySQL on the Raspi was the biggest unknown. The database is more than a collection of records, the database manager  includes programs to control every aspect of the database. It was possible that MySQL itself would swallow all of the available resources, locking-up the Raspi.  If so I had a fall-back plan of using an alternative database, SQLite.This project is entirely software based but there is certainly scope to use the Raspi's GPIO capability to expand the range of parameters being monitored;  perhaps adding some form of light metering?  Collecting Raw Weather Data the Open Source WayReadings from instruments outside the house are passed to a base station inside the house by radio link. The base-station stores the data  and makes it available to the Raspi via usb.  When the base-station's buffer is full it over-writes the oldest record. Software is supplied but it is closed source and does not run on linux. .  Fortunately, other  projects have already produced  interfaces for linux and, being open-source, we can use their routines to move the weather data onto our Raspi.  The software that I used  is called  pywws and was developed in Python by Jim Easterbrook, it is an excellent system  providing many facilities. However, for the purposes of Squall, I only needed  the LogData function to capture the weather station data and present it to us as a text-file on the Raspi. The pywws software is well documented with an active forum but I have also outlined my installation (break-out box 1).ExperienceThe weather station and the Raspi have worked well over the last year. Unfortunately, I don't have a really clear site for the station  and I have largely disregarded the wind speed and direction as unreliable. The attached diagrams show data generated by my station. The pressure measurements agree closely with those reported by the National Physical Laboratory and show a series of weather fronts moving across the country in January/February 2013.I live in the a coastal location to the the south of the country and temperatures tend to be slightly higher than the UK averages. However,  The maximum and minimum temperature readings are in general agreement with monthly summaries produced by the Met Office.  This diagram also shows that the  weather station signal is noisy, producing the occasional spurious, unrealistically high or low reading. Simple measures such as keeping cable short and attaching extra ferrite rings would reduce the impact of some types of  interference but don't seem to have solved this problem. A pragmatic approach would be  delete a record that was impossibly higher or lower than readings taken a few minutes before or after. The base station and weather station are both powered by batteries. I would advise  mounting the anemometer (wind speed) and weather vane well above ground level and in the clear. However the temperature and pressure monitor mounted lower at around two metres above ground level. This would be in keeping with Met Office practice but also allows the battery to be changed more easily  when needed.   Were the objectives Met?Yes, my weather data  were in good agreement with the professional results locally and nationally. The system worked well and I was able to transfer results automatically to my website.MySQL performed very well  on the Raspi giving me powerful tools to manage a small but not trivial amount of data. (Taking readings every five minutes will generate 12x24x365= 105,120 records per year. This is small for MySQL but impractical to search manually).I would not seriously recommend MySQL on the Raspi for a production environment but it has  performed and could be a useful option for other projects. It could, perhaps, be useful in teaching SQL.Appendix One – Bash ScriptsSquall consists of a number of Bash scripts. Most of the scripts are relatively simple and cover one task by making a single call to MySQL. Most of the real work is actually done within that MySQL query,If you are unfamiliar with scripts it can seem quite daunting you need to think about it as broken down into many parts. There are guides on the web but there are tutorials on YouTube,In my scripts I may need to do something with a file but I won't know the precise name of the file until I run the program (the name may include a date). Therefore I need to work out what the correct name of the file should be and use that name.  To do this we need to handle text – often known as strings.For example in the load_weather_data script	#		   **** first set up some text strings#       	   **** we call  “~/squall/data/raw” by the name PREFIX#       	   **** we let the program know that should treat PREFIX as a string#       	   **** by referring to it as $PREFIX#PREFIX="~/squall/data/raw/"SUFFIX=".txt"##	  	**** We have the beginning and the ending of our filename#		****  but we need to call the date function to get today's date#    		**** The confusing % are telling the Raspi to use specific parts of the date.#		**** between the % values are some standard text / and -#		**** in this case $FILE might be 2013/2013-12/2013-12-30#FILE=$(date +"%Y/%Y-%m/%Y-%m-%d")##		**** finally we can join PREFIX, FILE and PREFIX together#		**** to get our filename – which we can refer to later as $FILENAME#FILENAME=$PREFIX$FILE$SUFFIX##		**** $FILENAME would be:-#		****                   ~/squall/data/raw/2013/2013-12/2013-12-30.txtAppendix Two – Database and SQLThe database design is very simple, with one main table holding dates, times and values. However,  values such as  maximum and minimum temperature have to be calculated and I created an additional table  to hold these calculated values. This is an efficient way to retrieve the information when needed but it is  not best practice. (To explain why this might cause problems, imagine that we find another record with a new maximum or minimum temperature. As soon as we add that new record the previously calculated values are wrong  and our database is inconsistent).SQL CommandsThe majority of SQL operations create a table, add records to a table or retrieve records. It is not particularly difficult to write the SQL and there are plenty of  text books, guides and tutorials available on the net. However, it becomes more complicated.It is not difficult to embed the SQL code from within a script. For example when loading new data onto the database:-	mysql -hlocalhost -uroot -praspberry --local-infile --verbose squall < 									~/squall/scripts/sql/load_weather_data.sql	mysql		command to call  the MySQL database manager.	-hlocalhost 	confirms we are working on our local machine (security is a big issue if we 			want 		to work remotely).	-uroot		this is the database root user, not root for the whole Raspi! On a full 				production 		machine we would not run as root.	-praspberry 	the password for the database root	--local-infile 	warns MySQL to expect some data within a file (you must specify this 				but it is 		NOT the name of the datafile itself.	--verbose 	if something goes wrong give us some clues.	squall		the name of the database we want to use. 	filename.sql 	a file containing valid SQL commandsThis command invokes but the SQL is actually within the file, load_weather_data.sql. The SQL is:-    LOAD DATA LOCAL INFILE '~/squall/data/indata.dat'   INTO TABLE rawdata   FIELDS TERMINATED BY ','   LINES TERMINATED BY '\n';Appendix Three - PywwsI am using the Logdata function of Pywws to transfer data from the base-station. The instructions on the pywws site are excellent and the only problem area seems to be access to the weather station via usb.  Dependencies, permissions and udev rules to overcome any problems are well described in the pyws documentation.  Pywws itself is quite small so I simply installed the whole package and just used  the script that I needed.Create a work directory for squallpi@raspi256 ~ $  mkdir squallInstall  Python	pi@raspi256 ~ $ sudo apt-get install python	pi@raspi256 ~ $ sudo apt-get install python-usb	pi@raspi256 ~ $ sudo apt-get install libusb-1.0-0download pywws-13.10-r1085.tar.gz from https://pypi.python.org/pypi/pywws/13.10-r1085Move the pywws archive to the working squall directory	pi@raspi256 ~ $ mv pywws-13.10-r1085.tar.gz ~/squall	pi@raspi256 ~ $ cd ~/squall	pi@raspi256 ~/squall $ tar zxvf pywws-13.10-r1085.tar.gzRemove the archive file if you are short of space.	pi@raspi256 ~/squall $ rm pywws-13.10-r1085.tar.gzAppendix Four - Preparing charts  - GnuplotSquall uses Gnuplot to generate charts within the script.   It is very powerful with the ability to produce almost any conceivable chart. It is not difficult to find examples on the Internet and then adapt them for your own use.  NB Gnuplot syntax is different to standard Bash script.Appendix Five -  Raspberry  PiI prepared a clean installation of Raspbian on a Raspi with only 256K memory. The Raspbian image (2013-12-20-wheezy-Raspbian.zip.) was  transferred to the the SD card using the linux command sudo dd bs=1M if=2013-12-20-wheezy-Raspbian.img of=/dev/sdb .  I ran sudo raspi-config to expand the file system space, set the local and hostname set the memory balance to16.